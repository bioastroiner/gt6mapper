/*
 * Add your dependencies here. Supported configurations:
 *  - api("group:name:version:classifier"): if you use the types from this dependency in the public API of this mod
 *       Available at runtime and compiletime for mods depending on this mod
 *  - implementation("g:n:v:c"): if you need this for internal implementation details of the mod, but none of it is visible via the public API
 *       Available at runtime but not compiletime for mods depending on this mod
 *  - compileOnly("g:n:v:c"): if the mod you're building doesn't need this dependency during runtime at all, e.g. for optional mods
 *       Not available at all for mods depending on this mod, only visible at compiletime for this mod
 *  - compileOnlyApi("g:n:v:c"): like compileOnly, but also visible at compiletime for mods depending on this mod
 *       Available at compiletime but not runtime for mods depending on this mod
 *  - runtimeOnlyNonPublishable("g:n:v:c"): if you want to include a mod in this mod's runClient/runServer runs, but not publish it as a dependency
 *       Not available at all for mods depending on this mod, only visible at runtime for this mod
 *  - devOnlyNonPublishable("g:n:v:c"): a combination of runtimeOnlyNonPublishable and compileOnly for dependencies present at both compiletime and runtime,
 *       but not published as Maven dependencies - useful for RFG-deobfuscated dependencies or local testing
 *  - runtimeOnly("g:n:v:c"): if you don't need this at compile time, but want it to be present at runtime
 *       Available at runtime for mods depending on this mod
 *  - annotationProcessor("g:n:v:c"): mostly for java compiler plugins, if you know you need this, use it, otherwise don't worry
 *  - testCONFIG("g:n:v:c") - replace CONFIG by one of the above (except api), same as above but for the test sources instead of main
 *
 *  - shadowImplementation("g:n:v:c"): effectively the same as API, but the dependency is included in your jar under a renamed package name
 *       Requires you to enable usesShadowedDependencies in gradle.properties
 *
 *  - compile("g:n:v:c"): deprecated, replace with "api" (works like the old "compile") or "implementation" (can be more efficient)
 *
 * You can exclude transitive dependencies (dependencies of the chosen dependency) by appending { transitive = false } if needed,
 * but use this sparingly as it can break using your mod as another mod's dependency if you're not careful.
 *
 * To depend on obfuscated jars you can use `devOnlyNonPublishable(rfg.deobf("dep:spec:1.2.3"))` to fetch an obfuscated jar from maven,
 * or `devOnlyNonPublishable(rfg.deobf(project.files("libs/my-mod-jar.jar")))` to use a file.
 *
 * Gradle names for some of the configuration can be misleading, compileOnlyApi and runtimeOnly both get published as dependencies in Maven, but compileOnly does not.
 * The buildscript adds runtimeOnlyNonPublishable to also have a runtime dependency that's not published.
 *
 * For more details, see https://docs.gradle.org/8.0.1/userguide/java_library_plugin.html#sec:java_library_configurations_graph
 */
dependencies {
    compileOnly "appeng:appliedenergistics2:rv3-beta-6:dev"
    compileOnly "com.hbm:hbm:1.0.27:dev"
    api("com.github.GTNewHorizons:ModularUI2:2.0.6-1.7.10:dev")
    api "com.gregoriust.gregtech:gregtech_1.7.10:6.16.02:dev"
    api 'com.github.GTNewHorizons:CodeChickenCore:1.1.11:dev'
    //compile(fileTree("libs/gregtech_1.7.10-6.16.02-dev.jar"))
    //compileOnly "team.chisel.ctmlib:CTMLib:MC1.7.10-1.4.1.5:deobf"
    //compileOnly "team.chisel:Chisel:2.9.5.12:deobf"
    //compileOnly "cofh:CoFHLib:1.7.10R3.0.3:dev"
    //compileOnly "maven.modrinth:baubles-expanded:2.1.4"
    //compileOnly fileTree("libs/Techguns.beta.1.2_alphatest4.1.jar")
    //api("com.github.GTNewHorizons:ModularUI2:2.0.6-1.7.10:dev"
    compileOnly "micdoodle8.mods:MicdoodleCore:1.7-3.0.12.504:Dev"
    compileOnly "micdoodle8.mods:GalacticraftCore:1.7-3.0.12.504:Dev"
    compileOnly "micdoodle8.mods:Galacticraft-Planets:1.7-3.0.12.504:Dev"
    compileOnly "ic2:IC2Classic:1.2.1.8:dev"

    compileOnly "twilightforest:twilightforest:1.7.10-2.3.8dev:dev"
    compileOnly "blusunrize:ImmersiveEngineering:0.7.7:deobf"
//    api "codechicken:CodeChickenLib:1.7.10-1.1.3.140:dev"
//    api "codechicken:CodeChickenCore:1.7.10-1.0.7.47:dev"
    //api 'com.github.GTNewHorizons:CodeChickenLib:1.1.8:dev'
//    api "com.github.GTNewHorizons:NotEnoughItems:2.3.82-GTNH:dev"
    //    compile "curse.maven:techguns-244201:2429662"


//    compileOnly "applecore:AppleCore:1.7.10-3.1.1:deobf"
//    compileOnly "ic2:IC2Classic:1.2.1.8:dev"
//    compileOnly "micdoodle8.mods:GalacticraftCore:1.7-3.0.12.504:Dev"
//    compileOnly "micdoodle8.mods:MicdoodleCore:1.7-3.0.12.504:Dev"
    compileOnly "openblocks:OpenBlocks:1.7.10-1.6-1.7.10:deobf"
    compileOnly "openmods:OpenModsLib:1.7.10-0.10:deobf"
    compileOnly "vazkii.botania:Botania:r1.8-250:deobf"
    compileOnly "com.mod-buildcraft:buildcraft:7.1.23:dev"
}
